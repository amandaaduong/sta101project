---
title: "STA101_Project"
author: "Niharika Misal"
date: "2024-05-28"
output: pdf_document
---
#Loading libraries and datasets
```{r}

MI_raw <- read.csv("~/Desktop/STA 101/Project/MI.csv", sep=";")
species_count <- read.csv("~/Desktop/STA 101/Project/Species_count.csv", sep=";")
names(MI_raw)
names(species_count)

source("functions.R")

# Checking dependencies ---------------------------------------------------
check_dependencies_all(c("ape", "coin", "doSNOW", "ggdist", "ggplot2", "nlme",
                         "patchwork", "rphylopic", "smatr", "spaMM", "tidyr"))


# Load dependencies used here (and not just in functions imported above) ----
library(spaMM)
library(smatr)
library(ape)

## Import the phylogenetic tree (downloaded from https://datadryad.org/stash/dataset/doi:10.5061/dryad.q2bvq83r2)
tree <- ape::read.tree("RAxML_bipartitions.result_FIN4_raw_rooted_wBoots_4098mam1out_OK.newick")


```
# Data Cleaning Functions
```{r}
prepare_df_MIfull <- function(raw_df) {
  
  ## Rename column
  raw_df$Key  <- raw_df$Name
  raw_df$Name <- raw_df$Common.name
  
  ## Compute derived columns
  ### Note: all masses are ultimately expressed in kg and duration in days
  raw_df$Species <- paste(raw_df$Genus, raw_df$Species)
  raw_df$Adult_mass   <- raw_df$Adult_mass_g/1000
  raw_df$Male_adult_mass   <- raw_df$Male_adult_mass_g/1000
  raw_df$Female_adult_mass   <- raw_df$Female_adult_mass_g/1000
  raw_df$Weaning_mass <- raw_df$Weaning_mass_g/1000
  raw_df$Litter_mass <- raw_df$Weaning_mass*raw_df$Litter.Clutch.size
  raw_df$Investment_duration <- raw_df$Gestation_days + raw_df$Lactation_days
  raw_df$Adult_mass_log10 <- log(raw_df$Adult_mass, base = 10)
  raw_df$Male_adult_mass_log10 <- log(raw_df$Male_adult_mass, base = 10)
  raw_df$Female_adult_mass_log10 <- log(raw_df$Female_adult_mass, base = 10)
  raw_df$Litter_mass_log10 <- log(raw_df$Litter_mass, base = 10)
  raw_df$Investment_duration_log10 <-  log(raw_df$Investment_duration, base = 10)
  raw_df$Lifespan <- raw_df$Maximum_longevity_y * 365.25
  raw_df$Lifespan_log10 <- log(raw_df$Lifespan, base = 10)
  
  ## Format character-columns into factors
  raw_df$Subclass <- as.factor(raw_df$Subclass)
  raw_df$Order    <- as.factor(raw_df$Order)
  raw_df$Key      <- as.factor(raw_df$Key)
  raw_df$Name     <- as.factor(raw_df$Name)
  
  ## Drop row for which critical information is missing
  raw_df <- raw_df[!is.na(raw_df$Litter_mass) & !is.na(raw_df$Adult_mass), ]
  
  ## Remove species for which the offspring are more than 15% heavier than the adult mass
  too_big <- raw_df$Weaning_mass_g > 1.15*raw_df$Adult_mass_g
    if (length(too_big) > 0) {
      message(paste("The following", sum(too_big),  "species have been discarded since the offspring are, at weaning age, more than 15% heavier than adults:"))
      message(paste(raw_df$Name[too_big], collapse = "\n"))
    }
  
  raw_df <- raw_df[!too_big, ]
  
  ## Remove species for which the adult default mass is more than 15% heavier than the heaviest adult sex
  too_big2 <- !is.na(raw_df$Male_adult_mass) & !is.na(raw_df$Female_adult_mass) & 1.15*pmax(raw_df$Male_adult_mass, raw_df$Female_adult_mass) < raw_df$Adult_mass
  
  if (length(too_big2) > 0) {
    message(paste("\nThe following", sum(too_big2),  "species have been discarded since the default adult mass was more than 15% heavier than the heaviest sex in adults:"))
    message(paste(raw_df$Name[too_big2], collapse = "\n"))
  }
  
  raw_df <- raw_df[!too_big2, ]
  
  ## Remove species for which the adult default mass is more than 15% lighter than the lighter adult sex
  too_small <- !is.na(raw_df$Male_adult_mass) & !is.na(raw_df$Female_adult_mass) & 0.85*pmin(raw_df$Male_adult_mass, raw_df$Female_adult_mass) > raw_df$Adult_mass
  
  if (length(too_small) > 0) {
    message(paste("\nThe following", sum(too_small),  "species have been discarded since the default adult mass was more than 15% lighter than the lightest sex in adults:"))
    message(paste(raw_df$Name[too_small], collapse = "\n"))
  }
  
  raw_df <- raw_df[!too_small, ]

  ## Reorder and select columns
  raw_df <- raw_df[, c("Species", "Key", "Subclass", "Family", "Order", "Name",
                       "Adult_mass", "Adult_mass_log10",
                       "Male_adult_mass", "Male_adult_mass_log10",
                       "Female_adult_mass", "Female_adult_mass_log10",
                       "Litter_mass", "Litter_mass_log10",
                       "Investment_duration", "Investment_duration_log10",
                       "Lifespan", "Lifespan_log10")]
  
  ## Final cleaning
  raw_df <- droplevels(raw_df)
  rownames(raw_df) <- NULL
  
  raw_df
}
```


#Data Preparation and SubClasses
```{r}
MI_full <- prepare_df_MIfull(MI_raw)
nrow(MI_full) # 1041

### Prepare subsample with for comparison between subclasses
MI_subclasses <- droplevels(MI_full[!is.na(MI_full$Investment_duration) & MI_full$Key %in% tree[["tip.label"]], ])
nrow(MI_subclasses) # 738
str(MI_subclasses)

### Prepare subsample without dropping species without investment duration
MI_subclasses_noD <- droplevels(MI_full[MI_full$Key %in% tree[["tip.label"]], ])
nrow(MI_subclasses_noD) # 801
str(MI_subclasses_noD)

### Prepare subsample for the comparison between orders
MI_orders <- prepare_df_MIfull.orders(MI_subclasses)
nrow(MI_orders) # 699
str(MI_orders)

#### Prepare subsample for the comparison between orders solely including Eutheria
MI_orders_euth <- droplevels(MI_orders[MI_orders$Subclass == "Eutheria", ])
nrow(MI_orders_euth)
# [1] 632

#### Prepare subsample for the comparison between orders solely including Metatheria
MI_orders_meta <- droplevels(MI_orders[MI_orders$Subclass == "Metatheria", ])
nrow(MI_orders_meta)
# [1] 67

### Prepare subsample with no missing data for modelling 
MI_models <- MI_subclasses
nrow(MI_models) # 738
str(MI_models)
```

# SLR Functions
```{r}
draw_figure_1 <- function(data_models, fit_SLR, fit_PLMM, fit_SMA, fit_MA, fit_MSLR, fit_MPLMM) {
  
  data_pred <- data.frame(Adult_mass = c(0.001, 1e6),
                          Adult_mass_log10 = log(c(0.001, 1e6), base = 10),
                          Investment_duration_log10 = mean(data_models$Investment_duration_log10))
  data_pred$SLR   <- 10^(predict(fit_SLR, newdata = data_pred)[, 1])
  data_pred$SMA   <- 10^as.numeric(as.matrix(cbind(1, data_pred[, "Adult_mass_log10", drop = FALSE])) %*% matrix(coef(fit_SMA)))
  data_pred$MPLMM <- 10^(predict(fit_MPLMM, newdata = data_pred, re.form = NA)[, 1])
  
  data_pred <- tidyr::pivot_longer(data_pred, cols = SLR:MPLMM, names_to = "Model", values_to = "Predict")
  data_pred$Model <- factor(data_pred$Model, levels = c("SLR", "PLMM", "SMA", "MA", "MSLR", "MPLMM"))
  
  fig <- ggplot2::ggplot(data = data_models, ggplot2::aes(Adult_mass, Litter_mass)) + 
    ggplot2::scale_x_continuous(trans = "log10", breaks = c(0.1, 1, 10, 100, 1000, 10000, 100000),
                                labels = c("0.1", "1", "10", "100", "1000", "10,000", "100,000"),
                                expand = c(0, 0)) + 
    ggplot2::scale_y_continuous(trans = "log10",
                                breaks = c(0.1, 1, 10, 100, 1000, 10000),
                                labels = c("0.1", "1", "10", "100", "1000", "10,000"),
                                expand = c(0, 0)) +
    ggplot2::scale_shape_manual(values = 21:23) +
    ggplot2::scale_fill_manual(values = c("steelblue", "darkred", "#FCC501")) +
    ggplot2::scale_color_viridis_d(option = "H", end = 0.8) +
    ggplot2::geom_point(ggplot2::aes(shape = Subclass, fill = Subclass), alpha = 0.7, size = 2) +
    ggplot2::geom_line(ggplot2::aes(y = Predict, x = Adult_mass, colour = Model), data = data_pred,
                       linewidth = 0.7, alpha = 0.8, inherit.aes = FALSE) +
    ggplot2::labs(x = 'Adult mass (kg)', y = 'Litter mass at weaning age (kg)') +
    ggplot2::theme_classic() +
    ggplot2::theme(legend.position = "right")
    
    print(fig)
}

```

# SLR Model
```{r}
fit_SLR_models <- fitme(Litter_mass_log10 ~ Adult_mass_log10, data = MI_models)

### Checking SLR model assumptions
plot(fit_SLR_models, ask = FALSE, which = "mean")    ## diagnostics (good!)
plot(fit_SLR_models, ask = FALSE, which = "predict") ## diagnostics (good!)

### Computing CI for estimates in SLR model
pretty(extract_fit_summary(fit_SLR_models))
#                  estimate lower_asymptotic upper_asymptotic
# (Intercept)        -0.196           -0.216           -0.176
# Adult_mass_log10    0.778            0.765            0.791
# 10^(Intercept)      0.637            0.608            0.666

### Computing R2 in SLR model
compure_r2(fit_SLR_models)
#    estimate lower upper    p
# r2    0.947 0.939 0.954 0.00

```

# SMA Model
```{r}
# Fitting SMA model to compare methods
# Already loaded MI data set
fit_SMA <- sma(Litter_mass_log10 ~ Adult_mass_log10, data = MI_models, method = "SMA")
### Checking SMA model assumptions
plot(fit_SMA, which = "default") ## diagnostics (good!)
plot(fit_SMA, which = "residual") ## diagnostics (good!)
plot(fit_SMA, which = "qq") ## diagnostics (ok)
### Find CI for estimates in SMA model
pretty(extract_fit_summary(fit_SMA))
### Computing R2 in SMA model
compure_r2(fit_SMA)
```

#PLMM Model
```{r}
run_slow <- FALSE

### Fitting PLMM model without estimation of best Pagel's Lambda (version 2: much faster)
### Note: since best Pagel's Lambda is 1 on these data, the same output can be quickly obtained as follows
fit_PLMM_models <- fitme_phylo_lambdafixed(
  lambda = 1, data = MI_models, tree = tree,
  args_spaMM = list(formula = Litter_mass_log10 ~ Adult_mass_log10 + corrMatrix(1|Key),
                    resid.model =  ~ Adult_mass_log10 + (1|Key)))

### Profile for Pagel's lamba
if (run_slow) {
  profile_lambda_PLMM <- profile_lambda(fit_PLMM_models)
  plot(logLik ~ Pagel_lambda, data = profile_lambda_PLMM, type = "o")
}

### Checking PLMM model assumptions
plot(fit_PLMM_models, ask = FALSE, which = "mean")  ## diagnostics (heteroscedastic, but this is accounted for)
plot(fit_PLMM_models, ask = FALSE, which = "ranef") ## diagnostics (ok)
plot(fit_PLMM_models, ask = FALSE, which = "predict") ## diagnostics (bad: residual variance partially captured by random variance)
plot(MI_models$Litter_mass_log10, predict(fit_PLMM_models, re.form = NA, type = "link")[, 1]) ## diagnostics, excluding ranef (good!)

### Computing CI for estimates in PLMM model (very computationally intensive)
if (run_slow) {
  PLMM_summary <- extract_fit_summary(fit_PLMM_models)
  pretty(PLMM_summary$fixef) # Note: we report the basic intervals in the MS
#                   estimate lower_normal upper_normal lower_percent upper_percent lower_basic upper_basic
#  (Intercept)        -0.192       -0.544        0.157        -0.556         0.150      -0.534       0.173
#  Adult_mass_log10    0.806        0.781        0.832         0.780         0.831       0.782       0.833
#  10^(Intercept)      0.643        0.286         1.44         0.278          1.41       0.293        1.49
  pretty(PLMM_summary$Pagel_Lambda)
# estimate    lower    upper 
#   "1.00"  "0.999"   "1.00" 
}

### Computing R2 in PLMM model
compure_r2(fit_PLMM_models) ## same as above
#    estimate lower upper    p
# r2    0.947 0.939 0.954 0.00
```

